// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`logOperation and toMiddleware when input funciton bundle log serial middleware in correct order for non-async function failure 1`] = `
Array [
  Array [
    Object {
      "operation": "operationFunctionA",
    },
  ],
  Array [
    Object {
      "operation": "operationFunctionA",
      "result": "success",
    },
  ],
  Array [
    Object {
      "operation": "operationFunctionB",
    },
  ],
]
`;

exports[`logOperation and toMiddleware when input funciton bundle log serial middleware in correct order for non-async function failure 2`] = `
Array [
  Array [
    Object {
      "category": "CUSTOM_ERROR",
      "message": "Not Found",
      "operation": "operationFunctionB",
      "result": "failure",
      "status": 404,
    },
  ],
]
`;

exports[`logOperation and toMiddleware when input funciton bundle log serial middleware in correct order for non-async functions success 1`] = `
Array [
  Array [
    Object {
      "operation": "operationFunctionA",
    },
  ],
  Array [
    Object {
      "operation": "operationFunctionA",
      "result": "success",
    },
  ],
  Array [
    Object {
      "operation": "operationFunctionB",
    },
  ],
  Array [
    Object {
      "operation": "operationFunctionB",
      "result": "success",
    },
  ],
  Array [
    Object {
      "operation": "operationFunctionC",
    },
  ],
  Array [
    Object {
      "operation": "operationFunctionC",
      "result": "success",
    },
  ],
]
`;

exports[`logOperation and toMiddleware when input individual function logs meta from previous middleware correctly 1`] = `
Object {
  "operation": "operationFunction",
  "transactionId": "xxxx-xxxx",
}
`;

exports[`logOperation and toMiddleware when input individual function logs meta from previous middleware correctly 2`] = `
Array [
  Array [
    Object {
      "operation": "operationFunction",
      "transactionId": "xxxx-xxxx",
    },
  ],
  Array [
    Object {
      "operation": "operationFunction",
      "result": "success",
      "transactionId": "xxxx-xxxx",
    },
  ],
]
`;

exports[`logOperation logs operation correctly combined with logAction when failure of async function 1`] = `
Array [
  Array [
    Object {
      "operation": "operationFunction",
    },
  ],
  Array [
    Object {
      "action": "callFunction",
      "operation": "operationFunction",
    },
  ],
]
`;

exports[`logOperation logs operation correctly combined with logAction when failure of async function 2`] = `
Array [
  Array [
    Object {
      "action": "callFunction",
      "category": "CUSTOM_ERROR",
      "message": "Not Found",
      "operation": "operationFunction",
      "result": "failure",
      "status": 404,
    },
  ],
  Array [
    Object {
      "category": "CUSTOM_ERROR",
      "message": "Not Found",
      "operation": "operationFunction",
      "result": "failure",
      "status": 404,
    },
  ],
]
`;

exports[`logOperation logs operation correctly combined with logAction when failure of async function 3`] = `Array []`;

exports[`logOperation logs operation correctly combined with logAction when failure of non-async function 1`] = `
Array [
  Array [
    Object {
      "operation": "operationFunction",
    },
  ],
  Array [
    Object {
      "action": "callFunction",
      "operation": "operationFunction",
    },
  ],
]
`;

exports[`logOperation logs operation correctly combined with logAction when failure of non-async function 2`] = `
Array [
  Array [
    Object {
      "action": "callFunction",
      "category": "CUSTOM_ERROR",
      "message": "Not Found",
      "operation": "operationFunction",
      "result": "failure",
      "status": 404,
    },
  ],
  Array [
    Object {
      "category": "CUSTOM_ERROR",
      "message": "Not Found",
      "operation": "operationFunction",
      "result": "failure",
      "status": 404,
    },
  ],
]
`;

exports[`logOperation logs operation correctly combined with logAction when failure of non-async function 3`] = `Array []`;

exports[`logOperation logs operation correctly combined with logAction when success of async function with async sub actions 1`] = `
Array [
  Array [
    Object {
      "operation": "operationFunction",
    },
  ],
  Array [
    Object {
      "action": "callFunction",
      "operation": "operationFunction",
    },
  ],
  Array [
    Object {
      "action": "callFunction",
      "operation": "operationFunction",
      "result": "success",
    },
  ],
  Array [
    Object {
      "operation": "operationFunction",
      "result": "success",
    },
  ],
]
`;

exports[`logOperation logs operation correctly combined with logAction when success of non-async function with non async sub actions 1`] = `
Array [
  Array [
    Object {
      "operation": "operationFunction",
    },
  ],
  Array [
    Object {
      "action": "callFunction",
      "operation": "operationFunction",
    },
  ],
  Array [
    Object {
      "action": "callFunction",
      "operation": "operationFunction",
      "result": "success",
    },
  ],
  Array [
    Object {
      "operation": "operationFunction",
      "result": "success",
    },
  ],
]
`;
